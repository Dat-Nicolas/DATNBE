import { PrismaClient, GioiTinh, Hocky, type Giangday, type Diem } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± ƒêang reset database...')
  await prisma.chitietdiem.deleteMany()
  await prisma.diem.deleteMany()
  await prisma.giangday.deleteMany()
  await prisma.hocsinh.deleteMany()
  await prisma.monhoc.deleteMany()
  await prisma.lop.deleteMany()
  await prisma.giaovien.deleteMany()

  // ------------------ GIAO VI√äN ------------------
  console.log('üë©‚Äçüè´ Th√™m gi√°o vi√™n...')
  await prisma.giaovien.createMany({
    data: Array.from({ length: 10 }).map((_, i) => ({
      Magv: `GV${(i + 1).toString().padStart(3, '0')}`,
      Hotengv: [
        'Nguy·ªÖn VƒÉn An', 'Tr·∫ßn Th·ªã B√¨nh', 'Ph·∫°m Minh ƒê·ª©c', 'L√™ Thu H∆∞∆°ng', 'V√µ Qu·ªëc Kh√°nh',
        'ƒê·∫∑ng VƒÉn L·ª£i', 'B√πi Th·ªã Mai', 'Ng√¥ ƒê·ª©c Nam', 'Ho√†ng Th·ªã Oanh', 'ƒê·ªó Quang Ph√∫c'
      ][i],
      Ngaysinh: new Date(1980 + i, 5, 15),
      Gioitinh: i % 2 === 0 ? GioiTinh.NAM : GioiTinh.NU,
      SDT: `090${i}12345`,
      Email: `gv${i + 1}@truongabc.edu.vn`,
    })),
  })

  // ------------------ M√îN H·ªåC ------------------
  console.log('üìò Th√™m m√¥n h·ªçc...')
  await prisma.monhoc.createMany({
    data: [
      { Mamon: 'TOAN', Tenmon: 'To√°n h·ªçc', Magv: 'GV001' },
      { Mamon: 'VAN', Tenmon: 'Ng·ªØ vƒÉn', Magv: 'GV002' },
      { Mamon: 'ANH', Tenmon: 'Ti·∫øng Anh', Magv: 'GV003' },
      { Mamon: 'LY', Tenmon: 'V·∫≠t l√Ω', Magv: 'GV004' },
      { Mamon: 'HOA', Tenmon: 'H√≥a h·ªçc', Magv: 'GV005' },
      { Mamon: 'SINH', Tenmon: 'Sinh h·ªçc', Magv: 'GV006' },
      { Mamon: 'SU', Tenmon: 'L·ªãch s·ª≠', Magv: 'GV007' },
      { Mamon: 'DIA', Tenmon: 'ƒê·ªãa l√Ω', Magv: 'GV008' },
      { Mamon: 'CN', Tenmon: 'C√¥ng ngh·ªá', Magv: 'GV009' },
      { Mamon: 'TD', Tenmon: 'Th·ªÉ d·ª•c', Magv: 'GV010' },
    ],
  })

  // ------------------ L·ªöP ------------------
  console.log('üè´ Th√™m l·ªõp...')
  await prisma.lop.createMany({
    data: Array.from({ length: 10 }).map((_, i) => ({
      Malop: `10A${i + 1}`,
      Tenlop: `L·ªõp 10A${i + 1}`,
      Magv: `GV00${(i % 5) + 1}`,
    })),
  })

  // ------------------ H·ªåC SINH ------------------
  console.log('üë®‚Äçüéì Th√™m h·ªçc sinh...')
  await prisma.hocsinh.createMany({
    data: Array.from({ length: 10 }).map((_, i) => ({
      Mahs: `HS${(i + 1).toString().padStart(3, '0')}`,
      Hotenhs: [
        'Nguy·ªÖn VƒÉn H√≤a', 'Tr·∫ßn Th·ªã Thu', 'L√™ ƒê·ª©c Anh', 'Ph·∫°m Thanh T√πng', 'V≈© Th·ªã Hoa',
        'ƒê·ªó Ng·ªçc Linh', 'Ng√¥ Minh ƒê·ª©c', 'B√πi Th·ªã Lan', 'Ho√†ng Gia Huy', 'Phan H·∫£i Y·∫øn'
      ][i],
      Diachi: `Ph∆∞·ªùng ${i + 1}, Qu·∫≠n Ho√†n Ki·∫øm, H√† N·ªôi`,
      Ngaysinh: new Date(2008, i, 10 + i),
      Gioitinh: i % 2 === 0 ? GioiTinh.NAM : GioiTinh.NU,
      Malop: `10A${(i % 5) + 1}`,
    })),
  })

  // ------------------ GI·∫¢NG D·∫†Y ------------------
  console.log('üìö Th√™m gi·∫£ng d·∫°y...')
  const gdList: Giangday[] = []                 // <-- ƒë·ªãnh ki·ªÉu m·∫£ng
  for (let i = 0; i < 10; i++) {
    const giangday = await prisma.giangday.create({
      data: {
        Namhoc: 2025,
        Hocky: i % 2 === 0 ? Hocky.HK1 : Hocky.HK2 ,
        // KH√îNG set STT (t·ª± autoincrement)
        Magv: `GV00${(i % 5) + 1}`,
        Malop: `10A${(i % 5) + 1}`,
        Mamon: ['TOAN', 'VAN', 'ANH', 'LY', 'HOA'][i % 5],
      },
    })
    gdList.push(giangday)
  }

  // ------------------ ƒêI·ªÇM ------------------
  console.log('üßÆ Th√™m ƒëi·ªÉm...')
  const diemList: Diem[] = []                   // <-- ƒë·ªãnh ki·ªÉu m·∫£ng
  for (let i = 0; i < 10; i++) {
    const diem = await prisma.diem.create({
      data: {
        Namhoc: 2025,
        Hocky: Hocky.HK1,
        Mahs: `HS${( (i % 10) + 1 ).toString().padStart(3, '0')}`, // ƒë·∫£m b·∫£o t·ªìn t·∫°i
        Mamon: ['TOAN', 'VAN', 'ANH', 'LY', 'HOA'][i % 5],
        DiemTH: 6 + Math.random() * 4,
        Diem15p: 6 + Math.random() * 4,
        Diemmieng: 6 + Math.random() * 4,
        Diemhs2: 6 + Math.random() * 4,
        Diemhs3: 6 + Math.random() * 4,
        Diemtbmon: 7 + Math.random() * 2,
        Diemtbnam: 7 + Math.random() * 2,
        GiangdayId: gdList[i].STT,              // d√πng STT tr·∫£ v·ªÅ
      },
    })
    diemList.push(diem)
  }

  // ------------------ CHI TI·∫æT ƒêI·ªÇM ------------------
  console.log('üìù Th√™m chi ti·∫øt ƒëi·ªÉm...')
  for (let i = 0; i < 10; i++) {
    await prisma.chitietdiem.create({
      data: {
        Diem: 7 + Math.random() * 3,
        Madiem: diemList[i].Madiem,
      },
    })
  }

  console.log('‚úÖ Seed ho√†n t·∫•t!')
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
